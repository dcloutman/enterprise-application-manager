# Generated by Django 5.2.4 on 2025-07-27 14:33

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CloudPlatform',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('code', models.CharField(max_length=20, unique=True)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('plugin_enabled', models.BooleanField(default=False)),
                ('plugin_config', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='DataStore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('datastore_type', models.CharField(choices=[('relational', 'Relational Database'), ('nosql', 'NoSQL Database'), ('cache', 'Cache Store'), ('search', 'Search Engine'), ('file', 'File Storage'), ('object', 'Object Storage'), ('queue', 'Message Queue')], max_length=20)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Application',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('business_purpose', models.TextField(help_text='What business function does this application serve?')),
                ('lifecycle_stage', models.CharField(choices=[('planning', 'Planning'), ('development', 'Development'), ('testing', 'Testing'), ('staging', 'Staging'), ('production', 'Production'), ('maintenance', 'Maintenance'), ('deprecated', 'Deprecated'), ('retired', 'Retired')], default='development', max_length=20)),
                ('criticality', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', max_length=20)),
                ('business_owner', models.CharField(help_text='Business unit or person responsible', max_length=200)),
                ('technical_owner', models.CharField(help_text='Technical person or team responsible', max_length=200)),
                ('version', models.CharField(blank=True, max_length=50)),
                ('deployment_path', models.CharField(blank=True, max_length=500)),
                ('uses_ldap', models.BooleanField(default=False, help_text='Does this application authenticate via LDAP/AD?')),
                ('ldap_config', models.JSONField(blank=True, default=dict)),
                ('is_active', models.BooleanField(default=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='created_applications', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='updated_applications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ApplicationLifecycleEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('from_stage', models.CharField(blank=True, choices=[('planning', 'Planning'), ('development', 'Development'), ('testing', 'Testing'), ('staging', 'Staging'), ('production', 'Production'), ('maintenance', 'Maintenance'), ('deprecated', 'Deprecated'), ('retired', 'Retired')], max_length=20, null=True)),
                ('to_stage', models.CharField(choices=[('planning', 'Planning'), ('development', 'Development'), ('testing', 'Testing'), ('staging', 'Staging'), ('production', 'Production'), ('maintenance', 'Maintenance'), ('deprecated', 'Deprecated'), ('retired', 'Retired')], max_length=20)),
                ('event_date', models.DateTimeField(auto_now_add=True)),
                ('notes', models.TextField(blank=True)),
                ('application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lifecycle_events', to='inventory.application')),
                ('performed_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['application', '-event_date'],
            },
        ),
        migrations.CreateModel(
            name='CloudPlugin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('plugin_module', models.CharField(help_text='Python module path for the plugin', max_length=200)),
                ('version', models.CharField(max_length=50)),
                ('description', models.TextField()),
                ('is_enabled', models.BooleanField(default=False)),
                ('configuration_schema', models.JSONField(default=dict, help_text='JSON schema for plugin configuration')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('cloud_platform', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='plugins', to='inventory.cloudplatform')),
            ],
            options={
                'ordering': ['cloud_platform', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ServerEnvironment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('hostname', models.CharField(max_length=255, unique=True)),
                ('ip_address', models.GenericIPAddressField()),
                ('environment_type', models.CharField(choices=[('physical', 'Physical Server'), ('virtual', 'Virtual Machine'), ('container', 'Container'), ('cloud', 'Cloud Instance')], max_length=20)),
                ('operating_system', models.CharField(max_length=100)),
                ('os_version', models.CharField(max_length=50)),
                ('cloud_instance_id', models.CharField(blank=True, max_length=100)),
                ('cloud_region', models.CharField(blank=True, max_length=50)),
                ('cpu_cores', models.PositiveIntegerField(blank=True, null=True)),
                ('memory_gb', models.PositiveIntegerField(blank=True, null=True)),
                ('storage_gb', models.PositiveIntegerField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('cloud_platform', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='inventory.cloudplatform')),
            ],
            options={
                'ordering': ['hostname'],
            },
        ),
        migrations.CreateModel(
            name='LanguageInstallation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.CharField(max_length=50)),
                ('installation_path', models.CharField(blank=True, max_length=500)),
                ('is_default', models.BooleanField(default=False)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('language', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.language')),
                ('server', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='language_installations', to='inventory.serverenvironment')),
            ],
            options={
                'ordering': ['server', 'language', 'version'],
                'unique_together': {('server', 'language', 'version')},
            },
        ),
        migrations.CreateModel(
            name='DataStoreInstance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.CharField(max_length=50)),
                ('instance_name', models.CharField(max_length=200)),
                ('port', models.PositiveIntegerField(blank=True, null=True)),
                ('connection_string', models.CharField(blank=True, max_length=500)),
                ('is_active', models.BooleanField(default=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('datastore', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.datastore')),
                ('server', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='datastore_instances', to='inventory.serverenvironment')),
            ],
            options={
                'ordering': ['server', 'datastore', 'instance_name'],
                'unique_together': {('server', 'instance_name', 'port')},
            },
        ),
        migrations.AddField(
            model_name='application',
            name='additional_servers',
            field=models.ManyToManyField(blank=True, related_name='secondary_applications', to='inventory.serverenvironment'),
        ),
        migrations.AddField(
            model_name='application',
            name='primary_server',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='primary_applications', to='inventory.serverenvironment'),
        ),
        migrations.CreateModel(
            name='ApplicationDataStoreDependency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_primary', models.BooleanField(default=False, help_text='Is this the primary datastore for the application?')),
                ('connection_type', models.CharField(blank=True, help_text='read-write, read-only, cache, etc.', max_length=50)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='datastore_dependencies', to='inventory.application')),
                ('datastore_instance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.datastoreinstance')),
            ],
            options={
                'ordering': ['application', '-is_primary', 'datastore_instance'],
                'unique_together': {('application', 'datastore_instance')},
            },
        ),
        migrations.CreateModel(
            name='ApplicationLanguageDependency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_primary', models.BooleanField(default=False, help_text='Is this the primary language for the application?')),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='language_dependencies', to='inventory.application')),
                ('language_installation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.languageinstallation')),
            ],
            options={
                'ordering': ['application', '-is_primary', 'language_installation'],
                'unique_together': {('application', 'language_installation')},
            },
        ),
    ]
